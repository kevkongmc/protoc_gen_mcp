#!/usr/bin/env python3
"""
MCP server implementation for {{ service.name }} using FastMCP
"""
import grpc
from concurrent import futures
{%- for module in required_modules %}
import {{ module }}
{%- endfor %}
from mcp.server.fastmcp import FastMCP
import asyncio
import sys
import time

# MCP Server setup using FastMCP
mcp = FastMCP("{{ service_metadata.name }}", version="{{ service_metadata.version }}")

# gRPC client setup
channel = grpc.insecure_channel('localhost:{{ grpc_port }}')
stub = {{ proto_name }}_pb2_grpc.{{ service.name }}Stub(channel)

# gRPC Service Implementation
class {{ service.name }}Servicer({{ proto_name }}_pb2_grpc.{{ service.name }}Servicer):
    """Implementation of {{ service.name }} service"""
    
{%- for method in service.method %}
    def {{ method.name }}(self, request, context):
        """Handle {{ method.name }} requests"""
        # TODO: Implement your gRPC logic here
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
{%- endfor %}
{%- for tool in tools %}
# MCP tool definition using FastMCP decorator
@mcp.tool()
def {{ tool.name }}({{ tool.param_str }}) -> dict:
    """{{ tool.description }}"""
    try:
        # Convert arguments to protobuf message
        pb_request = {{ tool.input_module }}.{{ tool.input_type }}(**{{ tool.param_dict }})
        # Call gRPC method
        response = stub.{{ tool.method_name }}(pb_request)
        # Convert protobuf response to JSON payload matching output schema
        result = {}
        for field_name in {{ tool.output_fields }}:
            if hasattr(response, field_name):
                result[field_name] = getattr(response, field_name)
        return result
    except grpc.RpcError as e:
        error_msg = f"gRPC error: {e.details() if hasattr(e, 'details') else str(e)}"
        return {"error": True, "error_message": error_msg}
    except Exception as e:
        error_msg = f"Error calling tool: {str(e)}"
        return {"error": True, "error_message": error_msg}

{%- endfor %}
def serve_grpc():
    """Start the gRPC server"""
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    {{ proto_name }}_pb2_grpc.add_{{ service.name }}Servicer_to_server(
        {{ service.name }}Servicer(), server
    )
    
    listen_addr = 'localhost:{{ grpc_port }}'
    server.add_insecure_port(listen_addr)
    
    print(f"Starting gRPC server on {listen_addr}", file=sys.stderr)
    server.start()
    return server

def main():
    """Main function"""
    # Start gRPC server in a separate thread
    grpc_server = serve_grpc()
    
    # Give the gRPC server time to start
    time.sleep(1)
    
    try:
        # Start MCP server using stdio transport
        print("Starting MCP server...", file=sys.stderr)
        mcp.run(transport="stdio")
    except KeyboardInterrupt:
        print("Shutting down...", file=sys.stderr)
    finally:
        # Clean up gRPC server
        grpc_server.stop(0)

if __name__ == '__main__':
    main()